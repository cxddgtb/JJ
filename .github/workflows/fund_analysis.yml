name: 基金数据爬取与分析

on:
  schedule:
    - cron: '0 9,15,21 * * 1-5'  # 工作日9点、15点、21点执行
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]

jobs:
  fund-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 安装依赖
      continue-on-error: true
      run: |
        python -m pip install --upgrade pip
        # 分步安装，确保核心功能可用
        echo "=== 安装核心网络包 ==="
        pip install requests urllib3 certifi || echo "网络包安装失败"

        echo "=== 安装数据处理包 ==="
        pip install pandas numpy || echo "数据处理包安装失败"

        echo "=== 安装网页解析包 ==="
        pip install beautifulsoup4 lxml || echo "解析包安装失败"

        echo "=== 安装图表包 ==="
        pip install matplotlib plotly || echo "图表包安装失败"

        echo "=== 安装金融数据包 ==="
        pip install akshare yfinance || echo "金融包安装失败"

        echo "=== 安装分析包 ==="
        pip install scikit-learn scipy || echo "分析包安装失败"

        echo "=== 安装工具包 ==="
        pip install PyYAML Jinja2 markdown python-dateutil pytz jieba || echo "工具包安装失败"

        echo "=== 尝试安装所有剩余依赖 ==="
        pip install -r requirements.txt || echo "完整安装失败，使用已安装的包继续"

    - name: 设置时区
      run: |
        sudo timedatectl set-timezone Asia/Shanghai

    - name: 运行基金数据爬取
      continue-on-error: true
      env:
        REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        echo "=== 开始运行基金分析系统 ==="
        python src/main.py || {
          echo "主程序运行失败，但继续执行后续步骤"
          exit 0
        }

    - name: 提交分析结果
      env:
        REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        if git diff --staged --quiet; then
          echo "没有新的变化"
        else
          git commit -m "自动更新基金分析报告 $(date '+%Y-%m-%d %H:%M:%S')"
          git push https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
        fi

    - name: 发送通知
      if: always()
      continue-on-error: true
      run: |
        # 尝试安装通知所需的基础包
        pip install requests || echo "安装requests失败"

        # 发送通知
        python src/notification.py "${{ job.status }}" || {
          echo "Python通知脚本失败，尝试简单通知"
          echo "GitHub Actions 工作流状态: ${{ job.status }}"
          echo "时间: $(date)"
          echo "仓库: ${{ github.repository }}"
        }
